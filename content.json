[{"title":"Win11下控制台读取鼠标操作","path":"2023/12/16/Win11下控制台读取鼠标操作/","text":"控制台函数读取事件需要引入Windows.h要从控制台获取鼠标事件需要使用ReadConsoleInput()函数;语法格式如下 BOOL WINAPI ReadConsoleInput( In HANDLE hConsoleInput, Out PINPUT_RECORD lpBuffer, In DWORD nLength, Out LPDWORD lpNumberOfEventsRead); 第一个参数为控制台输入缓冲句柄,标识从哪个控制台缓冲区读取事件,必须具有GENERIC_READ权限 第二个参数为指向类型INPUT_RECORD结构数组的变量 INPUT_RECORD结构中的内容 typedef struct _INPUT_RECORD { WORD EventType; union { KEY_EVENT_RECORD KeyEvent; MOUSE_EVENT_RECORD MouseEvent; WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent; MENU_EVENT_RECORD MenuEvent; FOCUS_EVENT_RECORD FocusEvent; } Event;} INPUT_RECORD; 第一个WORD类型的EventType中记录事件的类型. 第三个参数为数组大小,使用时设置为1即可; 第四个参数为指向接收读取输入记录数量的变量 使用获取的事件获取的事件储存在INPUT_RECORD类型的变量中.获取鼠标事件后,这个结构中的EventType变为MOUSE_Event,使用成员运算符即可获取EventType中的数据,再结合if语句判断是否为鼠标事件.假设该变量名为Recordif(Record.EventType==MOUSE_Event) 判断为鼠标事件后即可读取鼠标事件中的数据.储存鼠标事件的结构为 typedef struct _MOUSE_EVENT_RECORD &#123; COORD dwMousePosition; DWORD dwButtonState; DWORD dwControlKeyState; DWORD dwEventFlags; &#125; MOUSE_EVENT_RECORD; dwMousePosition为COORD类型,储存鼠标的位置 dwButtonState为DWORD类型,储存鼠标按钮的状态,可为以下值之一: FROM_LEFT_1ST_BUTTON_PRESSED 0x0001 最左侧的鼠标按钮。FROM_LEFT_2ND_BUTTON_PRESSED 0x0004 左侧的第二个按钮。FROM_LEFT_3RD_BUTTON_PRESSED 0x0008 左侧的第三个按钮。FROM_LEFT_4TH_BUTTON_PRESSED 0x0010 左侧的第四个按钮。RIGHTMOST_BUTTON_PRESSED 0x0002 最右侧的鼠标按钮。 dwEventFlag储存鼠标事件的类型.若此值为零则表示按下或松开鼠标按键,反之则为以下值之: DOUBLE_CLICK 0x0002 所发生的双击操作的第二次单击（按钮按下）.第一次单击将作为常规按钮按下事件返回。 MOUSE_HWHEELED 0x0008 水平鼠标滚轮已移动。 如果 dwButtonState 成员的高字包含正值，则滚轮向右旋转。 否则，滚轮向左旋转。 MOUSE_MOVED 0x0001 发生了鼠标位置更改。 MOUSE_WHEELED 0x0004 垂直鼠标滚轮已移动。如果 dwButtonState 成员的高字包含正值，则滚轮向前旋转，远离用户。 否则，滚轮向后旋转，接近用户。 再次使用if语句判断鼠标事件的类型即可if(Record.MouseEvent.dwButtonState==FROM_LEFT_1ST_BUTTON_PRESSED) Win11下需要的另外工作由于微软在Win10引入了控制台的快速编辑模式,导致win10及更高的操作系统直接用ReadConsoleInput()函数时无法获取操作,所以需要手动关闭快速编辑模式.一种方法时每次打开控制台时从设置这种关闭快速操作,另一种为使用代码修改.显然第二种更胜一筹.修改控制台模式使用的函数为SetConsoleMode();该函数接受两个参数,第一个参数为控制台缓冲区输入句柄,第二个为DWORD类型的变量,储存模式;在使用该函数之前需要先使用GetConsoleMode()获取当前的控制台模式,该函数参数与SetConsoleMode()一致,但第二个参数为指针传递.获取控制台模式后,用如下代码移除快速编辑 123mode &amp;= ~ENABLE_QUICK_EDIT_MODE; //设置模式属性mode &amp;= ~ENABLE_INSERT_MODE; //因为win10引入了控制台快速编辑模式，会影响控制台缓冲区的输入，所以需要关闭快速编辑模式，每次使用都需要关闭mode |= ENABLE_MOUSE_INPUT; 然后使用SetConsoleMode()函数即可 示例123456789101112131415161718192021222324#include&lt;Windows.h&gt;#include&lt;iostream&gt;int main()&#123; DWORD res=0; DWORD mode; INPUT_RECORD a; HANDLE hIn=GetStdHandle(STD_INPUT_HANDLE); GetConsoleMode(hIn,&amp;mode); mode &amp;= ~ENABLE_QUICK_EDIT_MODE; //设置模式属性 mode &amp;= ~ENABLE_INSERT_MODE; //因为win10引入了控制台快速编辑模式，会影响控制台缓冲区的输入，所以需要关闭快速编辑模式，每次使用都需要 mode |= ENABLE_MOUSE_INPUT; SetConsoleMode(hIn,mode); while(1) &#123; ReadConsoleInput(hIn,&amp;a,1,&amp;res); if (a.Event.MouseEvent.dwEventFlags == MOUSE_MOVED) //Mouse Moved &#123; std::cout&lt;&lt;&quot;Mouse Moved&quot;&lt;&lt;std::endl; &#125; &#125; &#125; 如有错误敬请指正，个人邮箱&#x73;&#x65;&#97;&#x77;&#x6f;&#x6e;&#64;&#112;&#101;&#x74;&#97;&#108;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;"},{"title":"Hello!","path":"2023/12/15/Hello/","text":""}]