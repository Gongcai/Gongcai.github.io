[{"title":"Win11下控制台读取鼠标操作","path":"2023/12/16/Win11下控制台读取鼠标操作/","text":"控制台函数读取事件需要引入Windows.h 要从控制台获取鼠标事件需要使用ReadConsoleInput()函数;语法格式如下 BOOL WINAPI ReadConsoleInput(In HANDLE hConsoleInput,Out PINPUT_RECORD lpBuffer,In DWORD nLength,Out LPDWORD lpNumberOfEventsRead); 第一个参数为控制台输入缓冲句柄,标识从哪个控制台缓冲区读取事件,必须具有GENERIC_READ权限 第二个参数为指向INPUT_RECORD结构的指针，记录输入时间 第三个为储存读取长度的变量 第四个为指向读取数量的变量的指针 需要操作的为第二个INPUT_RECORD结构 1234567891011typedef struct _INPUT_RECORD &#123;WORD EventType;union &#123; KEY_EVENT_RECORD KeyEvent; MOUSE_EVENT_RECORD MouseEvent; WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent; MENU_EVENT_RECORD MenuEvent; FOCUS_EVENT_RECORD FocusEvent; &#125; Event;&#125; INPUT_RECORD; EventType 输入事件类型的句柄和存储在事件成员中的事件记录。此成员可以是以下值之一。 FOCUS_EVENT 0x0010KEY_EVENT 0x0001 MENU_EVENT 0x0008 MOUSE_EVENT 0x0002 WINDOW_BUFFER_SIZE_EVENT 0x0004 判断输入事件类型和鼠标事件类型使用成员运算符即可访问各个数据，用if语句判断EventType为MOUSE_EVENT后即可对鼠标事件分析（当然也可以直接分析）鼠标输入为MOUSE_EVENT_RECORD结构 123456typedef struct _MOUSE_EVENT_RECORD &#123;COORD dwMousePosition;DWORD dwButtonState;DWORD dwControlKeyState;DWORD dwEventFlags;&#125; MOUSE_EVENT_RECORD; dwMousePosition 包含游标位置的 COORD 结构，以控制台屏幕缓冲区的字符单元坐标为单位。 dwButtonState 鼠标按钮的状态。 最小有效位对应于最左侧的鼠标按钮。 下一个最小有效位对应于最右侧的鼠标按钮。 下一位表示左侧第二个鼠标按钮。 接下来的位从左到右与鼠标按钮对应。 如果按下了按钮，则位为 1。 FROM_LEFT_1ST_BUTTON_PRESSED 0x0001 最左侧的鼠标按钮。FROM_LEFT_2ND_BUTTON_PRESSED 0x0004 左侧的第二个按钮。FROM_LEFT_3RD_BUTTON_PRESSED 0x0008 左侧的第三个按钮。FROM_LEFT_4TH_BUTTON_PRESSED 0x0010 左侧的第四个按钮。RIGHTMOST_BUTTON_PRESSED 0x0002 最右侧的鼠标按钮。 dwEventFlags鼠标事件的类型。 如果此值为零，则表示按下或释放了鼠标按钮。 否则，此成员是以下值之一。 DOUBLE_CLICK 0x0002 双击MOUSE_HWHEELED 0x0008 水平鼠标滚轮移动如果dwButtonState成员的高字包含正值，则滚轮向右旋转。否则，滚轮向左旋转。 MOUSE_MOVED 0x0001 鼠标移动MOUSE_WHEELED 0x0004 垂直鼠标滚轮已移动如果 dwButtonState 成员的高字包含正值，则滚轮向前旋转，远离用户。 否则，滚轮向后旋转，接近用户。 同样可使用成员运算符进行访问 在Win11需要做的工作由于微软在win10上引入了快速编辑，导致无法直接获取操作事件，所以需要先关闭快速编辑可以手动在设置里关闭，也可以通过程序关闭这里需要用到GetConsoleMode()函数先获取当前控制台模式，再把当前的控制台模式修改，再通过SetConsoleMode()函数修改模式可通过以下代码修改 123456HANDLE hIn = GetStdHandle(STD_INPUT_HANDLE);GetConsoleMode(hIn, &amp; mode);mode &amp;= ~ENABLE_QUICK_EDIT_MODE; //设置模式属性mode &amp;= ~ENABLE_INSERT_MODE; //因为win10引入了控制台快速编辑模式，会影响控制台缓冲区的输入，所以需要关闭快速编辑模式，每次使用都需要mode |= ENABLE_MOUSE_INPUT;SetConsoleMode(hIn, mode); 比较简单，不细讲了 示例123456789101112131415161718192021222324#include&lt;Windows.h&gt;#include&lt;iostream&gt;int main()&#123; DWORD res = 0; DWORD mode; INPUT_RECORD a; HANDLE hIn = GetStdHandle(STD_INPUT_HANDLE); GetConsoleMode(hIn, &amp; mode); mode &amp;= ~ENABLE_QUICK_EDIT_MODE; //设置模式属性 mode &amp;= ~ENABLE_INSERT_MODE; //因为win10引入了控制台快速编辑模式，会影响控制台缓冲区的输入，所以需要关闭快速编辑模式，每次使用都需要 mode |= ENABLE_MOUSE_INPUT; SetConsoleMode(hIn, mode); while (1) &#123; ReadConsoleInput(hIn, &amp;a, 1, &amp;res); if (a.Event.MouseEvent.dwEventFlags == MOUSE_MOVED) //Mouse Moved &#123; std::cout &lt;&lt; &quot;Mouse Moved&quot; &lt;&lt; std::endl; &#125; &#125;&#125; 若有错误，敬请指出&#115;&#101;&#x61;&#x77;&#x6f;&#x6e;&#64;&#112;&#101;&#116;&#x61;&#x6c;&#109;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;"},{"title":"Hello!","path":"2023/12/15/Hello/","text":""}]